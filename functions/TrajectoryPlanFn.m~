%%Main Script
clear
close all
%physical vars
t_step = 0.5; %keep it so you'll get integers from your time. this could be a failure mode :s

%% Robot Params
%Robot paramters
b=160;
L1 = 180;
L2 = 240;
L3 = 50;
R_Params = [b, L1, L2, L3];


%% block planning

num_blocks=54;
tower_y=-37.5;
tower_x= 180 ;

[ BlMat ] = block_planning(tower_y, tower_x); %retunrs a matrix with 54x3 elements. 54 blocks with there respective x y and z positions

%% Trajectory Planning %%%%%%%%%%%%%%%

% Fixed parameters
Via1xy=[ 150, 150 ]; %x,y position of first via point
suction_pause = 1; %in seconds

%fixed vectors
PL     = [80,170,15]  ; %loading bay position
vels_x =[0, 50, 0, 0] ; %velocoity at (PL, P1, P2, Pf) in mm/s
vels_y =[0, 50, 0, 0] ; %velocoity at (PL, P1, P2, Pf) in mm/s
vels_z =[0, 50, 10, 0]; %velocoity at (PL, P1, P2, Pf) in mm/s
times  =[ 4, 2, 2 ]   ; %time for each arc (PL -> P1, then P1 -> P2, then P2 -> Pf
via_clear=75;
deg_0=0;
deg_f=90;



%caluclated values
tot_time=sum(times)+ (suction_pause); %total time for going from loading bay to block pos
% assumes the same time to get back and therefore assumes the same pause time at 'pickup' and 'dropoff'
suction_pause_cycle = round(suction_pause/t_step);
vals_per_traj = tot_time/t_step+1; %number of values in each trajectory **ONE WAY**
vals_per_return = vals_per_traj*2; %number of values in each trajectory **RETURN **

%initialise output matrix
BFM_Position = zeros(vals_per_return,3,num_blocks); %54 blocks
BFM_Velocity = zeros(vals_per_return,3,num_blocks); %54 blocks
BFM_Rotation = zeros(vals_per_return,1,num_blocks); %54 blocks
BFM_AngulVel = zeros(vals_per_return,1,num_blocks); %54 blocks


% Loop to find all the trajectories, store them in BFMs
for k=1:num_blocks
    
    P1 = [Via1xy , BlMat(k,3)+ via_clear]; %first via point is some x,y and the z height of the block plus some offset in the z
    Pf = BlMat(k,:); %final location is that of the block
    P2 = [BlMat(k,1:2) , BlMat(k,3) + via_clear]; %second via point is the block location plus some offset in z
    
    posies_x=[PL(1),P1(1),P2(1),Pf(1)];
    posies_y=[PL(2),P1(2),P2(2),Pf(2)];
    posies_z=[PL(3),P1(3),P2(3),Pf(3)];
    
    [ x_traj_pos, x_traj_vel ] = single_traj(posies_x, vels_x, times , t_step);
    [ y_traj_pos, y_traj_vel ] = single_traj(posies_y, vels_y, times , t_step);
    [ z_traj_pos, z_traj_vel ] = single_traj(posies_z, vels_z, times , t_step);
    [ Ot, Ot_dot ]             = rotation_planning(deg_0, deg_f, times , t_step);
    
    
    %create x,y,z matrices
    POS_traj = [x_traj_pos,y_traj_pos,z_traj_pos];
    VEL_traj = [x_traj_vel,y_traj_vel,z_traj_vel];
    
    %create reverse path, back to the loading bay
    
    REV_POS_traj = flipud(POS_traj);
    REV_VEL_traj = flipud(VEL_traj);
    REV_Ot = flipud(Ot);
    REV_Ot_dot = flipud(Ot_dot);
    
    %add pauses (optional)
    %translation/velocity
    POS_traj = [POS_traj ; (ones(suction_pause_cycle,3).*Pf)];
    VEL_traj = [VEL_traj ; zeros(suction_pause_cycle,3)];
    REV_POS_traj = [REV_POS_traj ; (ones(suction_pause_cycle,3).*PL)];
    REV_VEL_traj = [REV_VEL_traj ; zeros(suction_pause_cycle,3)];
    %rotation
    Ot          =    [Ot ; (ones(suction_pause_cycle,1).*deg_f)];
    Ot_dot      =    [Ot_dot ; zeros(suction_pause_cycle,1)];
    REV_Ot      =    [REV_Ot ; (ones(suction_pause_cycle,1).*deg_0)];
    REV_Ot_dot  =    [REV_Ot_dot ; zeros(suction_pause_cycle,1)];
    
    
    
    
    BFM_Position(:,:,k) =   [POS_traj;REV_POS_traj];
    BFM_Velocity(:,:,k) =   [VEL_traj;REV_VEL_traj];
    %     BFM_Rotation(:,:,k) = [Ot;REV_Ot];
    %     BFM_AngulVel(:,:,k) =   [Ot_dot;REV_Ot_dot]
    
    Orientation_layer1=[zeros(38,1)];
    Orientation_layer2=[Ot;REV_Ot];
    Orientation_2Layer=[repmat(Orientation_layer1,3,1); repmat(Orientation_layer2,3,1)]; %David's hacky method
    Orientation_Long=repmat(Orientation_2Layer,num_blocks/6,1);
end

%% Rearrange the BFMs
%this rearranges the 3d BFMs in to 2d long matrices.
%complicated to actually do this, see:
%https://au.mathworks.com/matlabcentral/answers/282896-change-a-3d-matrix-to-a-stacked-2d-matrix
Position_Long = reshape(permute(BFM_Position, [2 1 3]), size(BFM_Position, 2), [])';
Velocity_Long = reshape(permute(BFM_Velocity, [2 1 3]), size(BFM_Velocity, 2), [])';
% Orientation_Long = reshape(permute(BFM_Rotation, [2 1 3]), size(BFM_Rotation, 2), [])';
% AngulVel_Long = reshape(permute(BFM_AngulVel, [2 1 3]), size(BFM_AngulVel, 2), [])';

%%Rounding if required
% Position_Long=round(Position_Long);
% Velocity_Long=round(Velocity_Long);


%% Initlaise qs
[Q1,Q2,Q3,Q4,Q5]=deal(zeros(length(Position_Long),1));

for l=1:length(Position_Long)
    %     inverse kinematics
    [Q1(l),Q2(l),Q3(l),Q4(l),Q5(l)] = Inv_Kin_Lean( Position_Long(l,1) , Position_Long(l,2) , Position_Long(l,3) ,R_Params );
end

LPVO=zeros(3,6,length(Position_Long));
for g=1:length(Position_Long)
    [T LPVO(:,:,g)] = For_Kin3D(Q1(g),Q2(g),Q3(g),Q4(g),Q5(g),R_Params);
end



%% DO I WANT TO RECORD THE VIDEO
VIDEO = 0;

%% SETUP VIDEO IF REQUIRED
if VIDEO
    dt=0.03
    fps = 1/dt;
    Video = VideoWriter('6linkRobot','MPEG-4');
    Video.FrameRate = fps;
    open(Video);
    
end

handle = figure(33);


%% Plotting
figure(33);
figure_format(1)

% very over-the-top axis defintion
sqr_mag=350;
xmin= -sqr_mag ; xmax = sqr_mag; ymin = -sqr_mag; ymax = sqr_mag; zmin = -sqr_mag; zmax = sqr_mag;
axis([xmin xmax ymin ymax zmin zmax]);
xlabel('X');    ylabel('Y');    zlabel('Z') %set the axis labels
view(90,135)
% grid on
hold on

%draw the floor
[x y] = meshgrid(-sqr_mag:100:sqr_mag); % Generate x and y data
z = zeros(size(x, 1)); % Generate z data

%initlaise tower
block_num=0; %zero blocks stacked to start with
blackout_counter=0;
block_on_cup=0;
next_block=1;

hold on

for h=1:length(Position_Long);%numel(Position_Long)
    
    hold off
    surf(x, y, z) % Plot the surface
    sqr_mag=550;
    xmin= -sqr_mag ; xmax = sqr_mag; ymin = -sqr_mag; ymax = sqr_mag; zmin = -sqr_mag; zmax = sqr_mag;
    axis([xmin xmax ymin ymax zmin zmax]);
    alpha 0.3
    
    hold on
    plot3(LPVO(1,:,h),LPVO(2,:,h),LPVO(3,:,h),'-o','LineWidth',3);
    if block_on_cup
        block_plot_rot([LPVO(1,end,h),LPVO(2,end,h),LPVO(3,end,h)],Orientation_Long(h));
    end
    tower_plot(block_num,BlMat);
    
    
    
    if     sum( [Position_Long(h,:)] == PL )  ==3
        block_on_cup = 1;
    end
    
    
    %check if the current position satisfies that of a block location
    if any(sum(  Position_Long(h,:)==round(BlMat(block_num+next_block,:))  ,2)  ==3 ) %%%%TEMPORARY ROUNDING
        if (blackout_counter > vals_per_traj/2)
            blackout_counter=0; %this counter provides a 'blackout' period where the program will not increment the block number.
            % This is to ensure it doesn't increment the block number twice
            % when the suction cup is only in the vacinity once
            block_num=block_num+1;
            block_on_cup=0;
            
            if block_num==54
                next_block=0;
            end
            
            
            
        end
    end
    blackout_counter=blackout_counter+1;
    
    
    
    %write the video
    if VIDEO
        writeVideo(Video,getframe(handle));
    end
    
    pause(0.001)
    
end
if VIDEO
    close(Video)
end





